@page "/details/{VioletName}"

@{
    string name = Violet != null ? $"Фиалка {Violet.Name}" : "Details";
}
<PageTitle>@name</PageTitle>
<HeadContent>
    <meta name="description" content="@($"{name} - подробное описание сорта растения.")">
</HeadContent>

<DetailsContainer>
    @{
        (StoredViolet leftViolet, StoredViolet rightViolet) = GetAdjacentViolets();
    }
    <section class="flex justify-center items-center gap-6">
        @if (AppState.FilteredViolets.Count < 3)
        {
            <DetailCard Violet="Violet"/>
        }
        else
        {
            <PreviewCard IsLeft="true" Violet="leftViolet"/>
            <DetailCard Violet="Violet"
                        AddToShoppingCart="() => AppState.AddToShoppingCartCallback(Violet)"/>
            <PreviewCard IsLeft="false" Violet="rightViolet"/>
        }
    </section>
    @if (AppState.FilteredViolets.Count > 1)
    {
        <DetailsNavigation LeftViolet="leftViolet" RightViolet="rightViolet" />
    }
</DetailsContainer>

@code
{
    [CascadingParameter]
    public CascadingAppState AppState { get; set; }

    [Parameter]
    public string VioletName { get; set; }

    private StoredViolet Violet { get; set; }

    protected override void OnParametersSet()
    {
        Violet = AppState.FilteredViolets.FirstOrDefault(violet => violet.TransliteratedName.Equals(VioletName));
    }

    private (StoredViolet leftViolet, StoredViolet rightViolet) GetAdjacentViolets()
    {
        int currentIndex = AppState.FilteredViolets.FindIndex(violet => violet.Id.Equals(this.Violet.Id));

        int leftIndex = 0;
        int rightIndex = 0;

        if (currentIndex == 0)
        {
            leftIndex = AppState.FilteredViolets.Count - 1;
            rightIndex = 1;
        }

        if (currentIndex == AppState.FilteredViolets.Count - 1)
        {
            leftIndex = currentIndex - 1;
            rightIndex = 0;
        }

        if (currentIndex != 0 && currentIndex != AppState.FilteredViolets.Count - 1)
        {
            leftIndex = currentIndex - 1;
            rightIndex = currentIndex + 1;
        }

        StoredViolet leftViolet = AppState.FilteredViolets.ElementAt(leftIndex < 0 ? 0 : leftIndex);
        StoredViolet rightViolet = AppState.FilteredViolets.ElementAt(rightIndex);
        return (leftViolet, rightViolet);
    }
}
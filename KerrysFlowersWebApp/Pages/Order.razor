@inject NavigationManager NavigationManager
@page "/order"
@using System.Net.Mail
@using System.Text.RegularExpressions
@using Dadata

<PageTitle>Заказ</PageTitle>
<HeadContent>
    <meta name="description" content="Заказ">
</HeadContent>

<MainContainer>

    <header class="hidden md:flex md:flex-col md:items-center md:gap-8">
        <h2 class="text-heading font-roboto font-bold text-6xl">
            Заказ
        </h2>
    </header>

    <OrderContainer>
        @if (AppState.Order != null)
        {
            <div class="w-full">
                <label for="name" class="block text-sm font-medium leading-6 @(IsNameValid == false ? "text-label" : "text-gray-900")">Имя</label>
                <div class="relative mt-2 rounded-md shadow-sm">
                    <input type="text" name="name" id="name" 
                           class="block w-full rounded-md border-0 py-1.5 px-2 text-gray-900 ring-1 ring-inset @(IsNameValid == false ? "ring-label" : "ring-gray-300") placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-text1 sm:text-sm sm:leading-6" 
                           placeholder="Имя"
                           @bind-value="Name"
                           @bind-value:event="oninput"
                           tabindex="1">
                </div>
            </div>
            <div class="w-full">
                <label for="phone" class="block text-sm font-medium leading-6 @(IsPhoneValid == false ? "text-label" : "text-gray-900")">Телефон@(IsPhoneValid == false ? " (в формате '79031234567')" : "")</label>
                <div class="relative mt-2 rounded-md shadow-sm">
                    <input type="tel" name="phone" id="phone"
                           class="block w-full rounded-md border-0 py-1.5 px-2 text-gray-900 ring-1 ring-inset @(IsPhoneValid == false ? "ring-label" : "ring-gray-300") placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-text1 sm:text-sm sm:leading-6" 
                           placeholder="79031234567"
                           @bind-value="PhoneNumber"
                           @bind-value:event="oninput"
                           tabindex="2">
                </div>
            </div>
            <div class="w-full">
                <label for="email" class="block text-sm font-medium leading-6 @(IsEmailValid == false ? "text-label" : "text-gray-900")">Email</label>
                <div class="relative mt-2 rounded-md shadow-sm">
                    <input type="email" name="email" id="email" autocomplete="email"
                           class="block w-full rounded-md border-0 py-1.5 px-2 text-gray-900 ring-1 ring-inset @(IsEmailValid == false ? "ring-label" : "ring-gray-300") placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-text1 sm:text-sm sm:leading-6" 
                           placeholder="mail@email.com"
                           @bind-value="Email"
                           @bind-value:event="oninput"
                           tabindex="3">
                </div>
            </div>
            
            <div class="w-full">
                <label for="address" class="block text-sm font-medium leading-6 @(IsAddressValid == false ? "text-label" : "text-gray-900")">Адрес</label>
                <div class="relative mt-2 rounded-md shadow-sm">
                    <input type="text" name="address" id="address" 
                           class="block w-full rounded-md border-0 py-1.5 px-2 text-gray-900 ring-1 ring-inset @(IsAddressValid == false ? "ring-label" : "ring-gray-300") placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-text1 sm:text-sm sm:leading-6" 
                           placeholder="Ходынский бульвар, 17, Москва, 125252"
                           @bind-value="Address"
                           @oninput="GetAddressSuggestion"
                           tabindex="4">
                </div>
                <div id="suggestion-container" class="mt-2 h-10 @(string.IsNullOrWhiteSpace(SuggestedAddress) ? "invisible" : "") ">
                    <div @onclick="SetSuggestedAddressToAddress" @onkeydown="HandleKeyDown" tabindex="5" class="flex cursor-pointer block w-full rounded-md py-1.5 px-2 text-gray-900 text-sm">
                        <svg class="fill-gray-500" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24">
                            <path d="m15 19l-1.4-1.425L17.175 14H7.5q-1.875 0-3.187-1.312T3 9.5t1.313-3.187T7.5 5H8v2h-.5q-1.05 0-1.775.725T5 9.5t.725 1.775T7.5 12h9.675L13.6 8.4L15 7l6 6z" />
                        </svg>
                        <p>@SuggestedAddress</p>
                    </div> 
                </div>
            </div>
            
            <div class="relative w-full grid grid-cols-1 gap-4 p-1  border border-text1 rounded">
                <div class="flex items-center justify-center absolute px-1 bg-text2 -top-[9px] right-2">
                    <p class="text-xs lowercase">Состав заказа</p>
                </div>
                @foreach (var violet in AppState.Order.Violets)
                {
                    <div>
                        <p class="font-bold">@violet.Name</p>
                        @if (violet.SelectedLeafs > 0)
                        {
                            <div>Листьев @violet.SelectedLeafs шт. - @violet.CalculatedLeafsPrice руб.</div>
                        }

                        @if (violet.SelectedChildren > 0)
                        {
                            <div>Деток @violet.SelectedChildren шт. - @violet.CalculatedChildrenPrice руб.</div>
                        }

                        @if (violet.SelectedWholePlants > 0)
                        {
                            <div>Растений @violet.SelectedWholePlants шт. - @violet.CalculatedWholePlantsPrice руб.</div>
                        }
                    </div>
                }

                <p class="font-bold justify-self-end">Итого: @AppState.Order.TotalPrice руб.</p>
            </div>
        }
        else
        {
            <div>
                Ничего не заказано...
            </div>
        }
    </OrderContainer>

    @if (AppState.Order != null)
    {
        <nav class="w-full font-montserrat text-menutext text-lg flex items-center justify-between">
            <button class="uppercase p-3 cursor-pointer hover:border border-menutext" @onclick="ClearOrder" title="Отменить заказ" tabindex="7">
                Отменить
            </button>
            @{
                var orderBtnStyle = "uppercase border border-menutext p-3";
            }
            
            @if (IsOrderButtonEnable)
            {
                orderBtnStyle += " hover:bg-text1 cursor-pointer";
                <button class="@orderBtnStyle" @onclick="() => CreateOrder(Name, PhoneNumber, Address, Email)" title="Сделать заказ" tabindex="6">
                    Заказать
                </button>    
            }
            else
            {
                orderBtnStyle += " disabled:opacity-50";
                <button class="@orderBtnStyle" disabled="disabled">
                    Заказать
                </button>    
            }
        </nav>
    }
    
</MainContainer>


@code
{
    [CascadingParameter] public CascadingAppState AppState { get; set; }

    private string Name { get; set; }
    private string PhoneNumber { get; set; }
    private string Address { get; set; }
    private string Email { get; set; }
    private string SuggestedAddress { get; set; }

    private bool IsNameValid
    {
        get
        {
            if (string.IsNullOrWhiteSpace(Name))
            {
                return false;
            }

            if (Name.Length > 50)
            {
                return false;
            }

            return true;
        }
    }

    private bool IsPhoneValid
    {
        get
        {
            if (string.IsNullOrWhiteSpace(PhoneNumber))
            {
                return false;
            }

            if (PhoneNumber.Length > 11)
            {
                return false;
            }

            const string pattern = @"^[87]\d{10}$";
            
            return Regex.IsMatch(PhoneNumber, pattern);
        }
    }

    private bool IsAddressValid
    {
        get
        {
            if (string.IsNullOrWhiteSpace(Address))
            {
                return false;
            }

            if (Address.Length is > 500 or < 2)
            {
                return false;
            }

            return true;
        }
    }

    private bool IsEmailValid
    {
        get
        {
            if (string.IsNullOrWhiteSpace(Email))
            {
                return false;
            }

            if (Email.Length > 100)
            {
                return false;
            }

            try
            {
                _ = new MailAddress(Email);
                return true;
            }
            catch
            {
                return false;
            }
        }
    }
    
    private bool IsOrderButtonEnable => IsNameValid && IsPhoneValid && IsAddressValid && IsEmailValid;

    private void ClearOrder()
    {
        AppState.ClearOrder();
        NavigationManager.NavigateTo("/cart");
    }

    private async Task CreateOrder(string name, string phone, string address, string email)
    {
        await AppState.CreateOrder(name, phone, address, email);

        AppState.ShowSuccessModal = true;
        StateHasChanged();
        
        await Task.Delay(TimeSpan.FromSeconds(5));
        
        AppState.ShowSuccessModal = false;
        StateHasChanged();
        
        NavigationManager.NavigateTo("/");
    }

    private void SetSuggestedAddressToAddress()
    {
        Address = SuggestedAddress;
        SuggestedAddress = "";
    }
    
    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            SetSuggestedAddressToAddress();
        }
    }

    private async Task GetAddressSuggestion(ChangeEventArgs obj)
    {
        try
        {
            if (obj.Value != null)
            {
                var inputStr = obj.Value.ToString();

                Address = inputStr;
            
                var token = Environment.GetEnvironmentVariable("DADATAKEY");
                var api = new SuggestClientAsync(token);
                var result = await api.SuggestAddress(inputStr);
                if (result != null)
                {
                    if (result.suggestions != null && result.suggestions.Count > 0)
                    {
                        var suggestion = result.suggestions.FirstOrDefault();
                    
                        if (suggestion != null && string.IsNullOrWhiteSpace(suggestion.value) == false)
                        {
                            SuggestedAddress = suggestion.value;
                        }
                    }
                }
            }
        }
        catch
        {
            // ignored
        }
    }
}
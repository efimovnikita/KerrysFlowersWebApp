@inject NavigationManager NavigationManager
@page "/cart"

<PageTitle>Корзина</PageTitle>
<HeadContent>
    <meta name="description" content="Корзина">
</HeadContent>

<MainContainer>

    <header class="hidden md:flex md:flex-col md:items-center md:gap-8">
        <h2 class="text-heading font-roboto font-bold text-6xl">
            Корзина
        </h2>
    </header>

    <CartContainer>
        @if (AppState.ShoppingCart.Count == 0)
        {
            <div>
                Корзина пуста...
            </div>
        }
        else
        {
            foreach (var violet in AppState.ShoppingCart)
            {
                <CartCard Violet="violet" RemoveFromShoppingCart="() => AppState.RemoveFromShoppingCartCallback(violet)"/>
            }
        }
    </CartContainer>

    @if (AppState.ShoppingCart.Count > 0)
    {
        <nav class="w-full font-montserrat text-menutext text-lg flex items-center justify-between">
            <button class="uppercase p-3 cursor-pointer hover:border border-menutext" @onclick="AppState.ClearShoppingCart">
                Очистить
            </button>

            @{
                var orderBtnStyle = "uppercase border border-menutext p-3";
            }

            @if (AppState.ShoppingCart.Any(violet => violet.HasSomeOrderedParts))
            {
                orderBtnStyle += " hover:bg-text1 cursor-pointer";
                <button class="@orderBtnStyle" @onclick="PrepareOrder">
                    Оформить
                </button>
            }
            else
            {
                orderBtnStyle += " disabled:opacity-50";
                <button class="@orderBtnStyle" disabled="disabled">
                    Оформить
                </button>
            }
        </nav>
    }
    
</MainContainer>


@code
{
    [CascadingParameter] public CascadingAppState AppState { get; set; }

    private void PrepareOrder()
    {
        AppState.PrepareOrder();
        NavigationManager.NavigateTo("/order#order-container");
    }
}
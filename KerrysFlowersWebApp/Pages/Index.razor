@page "/"
@page "/catalog"
@page "/{Filter}/{Criteria}"

<PageTitle>Каталог фиалок Екатерины Ефимовой</PageTitle>
<HeadContent>
    <meta name="description" content="Главная страница каталога фиалок Екатерины Ефимовой.">
</HeadContent>

<MainContainer>
    
    <CatalogHeader/>

    <div class="w-[300px] text-menutext sm:w-[500px] md:w-[700px] lg:w-[900px]">
        @* Контейнер заголовка *@
        @{
            List<string> headerContainerStyle = new()
            {
                "bg-menu", "flex", "justify-between", "items-center", "p-2.5",
                "cursor-pointer", "gap-3",
                AppState.FiltersPanel.Invisible ? "rounded-[22px]" : "rounded-t-[22px]"
            };
        }
        <div class="@(String.Join(' ', headerContainerStyle))">
            <button class="w-full flex justify-between items-center" @onclick="() => AppState.FiltersPanel.Invisible = !AppState.FiltersPanel.Invisible" title="Открыть/закрыть панель фильтров">
                <span class="text-xl hover:underline hover:decoration-menutext/30 hover:underline-offset-4">Фильтры</span>
                @{
                    string headerSvgStyle = AppState.FiltersPanel.Invisible ? "rotate-180" : "";
                }
                <svg class="@headerSvgStyle" width="25" height="24" viewBox="0 0 25 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M5.00301 16.011L12.5 8.70297L19.997 16.011C20.131 16.1418 20.3108 16.2151 20.498 16.2151C20.6852 16.2151 20.8651 16.1418 20.999 16.011C21.0639 15.9474 21.1154 15.8716 21.1506 15.7879C21.1857 15.7042 21.2039 15.6143 21.2039 15.5235C21.2039 15.4327 21.1857 15.3428 21.1506 15.2591C21.1154 15.1754 21.0639 15.0995 20.999 15.036L13.0235 7.25997C12.8834 7.12345 12.6956 7.04704 12.5 7.04704C12.3044 7.04704 12.1166 7.12345 11.9765 7.25997L4.00101 15.0345C3.93569 15.0981 3.88378 15.1741 3.84833 15.2581C3.81289 15.3421 3.79462 15.4323 3.79462 15.5235C3.79462 15.6146 3.81289 15.7049 3.84833 15.7889C3.88378 15.8728 3.93569 15.9489 4.00101 16.0125C4.13495 16.1433 4.31477 16.2166 4.50201 16.2166C4.68925 16.2166 4.86906 16.1433 5.00301 16.0125V16.011Z" fill="#FDD9C2"/>
                </svg>
            </button>
            <button @onclick="AppState.ResetAllFilters" title="Сбросить все фильтры">
                <svg class="@(AppState.HasAnyActiveFilter() ? "stroke-label" : "stroke-menutext")"
                     width="25" height="25" fill="none" stroke-linecap="round" stroke-linejoin="round" 
                     stroke-width="1" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path d="m3 3 18 18"></path>
                    <path d="M14 14v5l-4-3v-4L5 6.5a1 1 0 0 1 .18-1.316"></path>
                    <path d="M9 5h9.5a1 1 0 0 1 .5 1.5l-4.049 4.454"></path>
                </svg>
            </button>
        </div>
        @* Контейнер кнопок сортировки *@
        @{
            List<string> sortButtonsContainerStyle = new() {"bg-menu", "flex", "flex-col", "items-start", "p-2.5", 
                "gap-[10px]", "border-t-[1px]", "border-t-background"};
            if (AppState.FiltersPanel.Invisible)
            {
                sortButtonsContainerStyle.Add("hidden");
            }
        }
        <div class="@(String.Join(' ', sortButtonsContainerStyle))">
            <button @onclick="SortByNameCallback" class="flex gap-[15px] items-center px-[10px] py-[5px] bg-background rounded-full hover:bg-text1">
                <span class="text-lg">По названию</span>
                <svg
                    class="fill-menutext"
                    width="25"
                    height="25"
                    viewBox="0 0 25 24"
                    xmlns="http://www.w3.org/2000/svg">
                    <path
                        d="M8.69298 1.962C8.63601 1.82536 8.53988 1.70863 8.41669 1.62652C8.2935 1.54441 8.14877 1.5006 8.00073 1.5006C7.85269 1.5006 7.70795 1.54441 7.58477 1.62652C7.46158 1.70863 7.36545 1.82536 7.30848 1.962L3.55848 10.962C3.48781 11.1445 3.49127 11.3474 3.56812 11.5273C3.64496 11.7073 3.78911 11.8501 3.96978 11.9253C4.15046 12.0005 4.35337 12.002 4.53519 11.9297C4.71701 11.8573 4.86335 11.7168 4.94298 11.538L6.00048 9H9.99948L11.057 11.538C11.1334 11.7218 11.2796 11.8677 11.4636 11.9437C11.6476 12.0196 11.8542 12.0194 12.038 11.943C12.2218 11.8666 12.3677 11.7204 12.4437 11.5364C12.5196 11.3524 12.5194 11.1458 12.443 10.962L8.69298 1.962ZM6.62448 7.5L7.99998 4.2L9.37548 7.5H6.62448ZM4.24998 14.25C4.24998 14.0511 4.329 13.8603 4.46965 13.7197C4.6103 13.579 4.80107 13.5 4.99998 13.5H10.25C10.3873 13.4998 10.522 13.5374 10.6395 13.6085C10.7569 13.6797 10.8525 13.7817 10.916 13.9035C10.9794 14.0253 11.0082 14.1621 10.9992 14.2991C10.9902 14.4361 10.9438 14.5681 10.865 14.6805L6.43998 21H10.25C10.4489 21 10.6397 21.079 10.7803 21.2197C10.921 21.3603 11 21.5511 11 21.75C11 21.9489 10.921 22.1397 10.7803 22.2803C10.6397 22.421 10.4489 22.5 10.25 22.5H4.99998C4.86267 22.5002 4.72795 22.4626 4.61051 22.3915C4.49307 22.3203 4.39741 22.2183 4.33397 22.0965C4.27053 21.9747 4.24174 21.8379 4.25073 21.7009C4.25973 21.5639 4.30616 21.4319 4.38498 21.3195L8.80998 15H4.99998C4.80107 15 4.6103 14.921 4.46965 14.7803C4.329 14.6397 4.24998 14.4489 4.24998 14.25ZM19.25 1.5C19.4489 1.5 19.6397 1.57902 19.7803 1.71967C19.921 1.86032 20 2.05109 20 2.25V19.9395L21.719 18.219C21.8598 18.0782 22.0508 17.9991 22.25 17.9991C22.4491 17.9991 22.6401 18.0782 22.781 18.219C22.9218 18.3598 23.0009 18.5508 23.0009 18.75C23.0009 18.9492 22.9218 19.1402 22.781 19.281L19.781 22.281C19.7113 22.3508 19.6285 22.4063 19.5374 22.4441C19.4463 22.4819 19.3486 22.5013 19.25 22.5013C19.1513 22.5013 19.0536 22.4819 18.9625 22.4441C18.8714 22.4063 18.7886 22.3508 18.719 22.281L15.719 19.281C15.5781 19.1402 15.499 18.9492 15.499 18.75C15.499 18.5508 15.5781 18.3598 15.719 18.219C15.8598 18.0782 16.0508 17.9991 16.25 17.9991C16.4491 17.9991 16.6401 18.0782 16.781 18.219L18.5 19.9395V2.25C18.5 2.05109 18.579 1.86032 18.7196 1.71967C18.8603 1.57902 19.0511 1.5 19.25 1.5Z"/>
                </svg>
            </button>
            <button @onclick="SortByPrimaryColorCallback" class="flex gap-[15px] items-center px-[10px] py-[5px] bg-background rounded-full hover:bg-text1">
                <span class="text-lg">По цвету</span>
                <svg
                    class="stroke-menutext"
                    width="25"
                    height="25"
                    viewBox="0 0 25 24"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg">
                    <path
                        d="M12.5 14.25C15.6066 14.25 18.125 11.7316 18.125 8.625C18.125 5.5184 15.6066 3 12.5 3C9.3934 3 6.875 5.5184 6.875 8.625C6.875 11.7316 9.3934 14.25 12.5 14.25Z"
                        stroke-width="1.5"
                        stroke-linejoin="round"/>
                    <path
                        d="M16.625 21C19.7316 21 22.25 18.4816 22.25 15.375C22.25 12.2684 19.7316 9.75 16.625 9.75C13.5184 9.75 11 12.2684 11 15.375C11 18.4816 13.5184 21 16.625 21Z"
                        stroke-width="1.5"
                        stroke-linejoin="round"/>
                    <path
                        d="M8.375 21C11.4816 21 14 18.4816 14 15.375C14 12.2684 11.4816 9.75 8.375 9.75C5.2684 9.75 2.75 12.2684 2.75 15.375C2.75 18.4816 5.2684 21 8.375 21Z"
                        stroke-width="1.5"
                        stroke-linejoin="round"/>
                </svg>
            </button>
        </div>
        <FilterTagsContainer Title="Теги" IsTail="false" Tags="@AppState.Filter.Tags" ChangeTagState="AppState.ChangeTagActivationState" IsHidden="AppState.FiltersPanel.Invisible" ChangeVisibility="AppState.ChangeTagsVisibility" Visible="AppState.FiltersPanel.TagsVisible" />
        <FilterTagsContainer Title="Цвета" IsTail="false" Tags="@AppState.Filter.ColorTags" ChangeTagState="AppState.ChangeTagActivationState" IsHidden="AppState.FiltersPanel.Invisible" ChangeVisibility="AppState.ChangeColorsVisibility" Visible="AppState.FiltersPanel.ColorsVisible"/>
        <FilterTagsContainer Title="Размеры" IsTail="false" Tags="@AppState.Filter.SizeTags" ChangeTagState="AppState.ChangeTagActivationState" IsHidden="AppState.FiltersPanel.Invisible" ChangeVisibility="AppState.ChangeSizesVisibility" Visible="AppState.FiltersPanel.SizesVisible"/>
        <FilterTagsContainer Title="Селекционеры" IsTail="false" Tags="@AppState.Filter.BreederTags" ChangeTagState="AppState.ChangeTagActivationState" IsHidden="AppState.FiltersPanel.Invisible" ChangeVisibility="AppState.ChangeBreedersVisibility" Visible="AppState.FiltersPanel.BreederVisible"/>
        <FilterTagsContainer Title="Годы селекции" IsTail="false" Tags="@AppState.Filter.YearTags" ChangeTagState="AppState.ChangeTagActivationState" IsHidden="AppState.FiltersPanel.Invisible" ChangeVisibility="AppState.ChangeYearsVisibility" Visible="AppState.FiltersPanel.YearsVisible"/>
        <FilterTagsContainer Title="Химеры" IsTail="true" Tags="@AppState.Filter.ChimeraTags" ChangeTagState="AppState.ChangeTagActivationState" IsHidden="AppState.FiltersPanel.Invisible" ChangeVisibility="AppState.ChangeChimeraVisibility" Visible="AppState.FiltersPanel.ChimeraVisible"/>
    </div>

    <CatalogContainer>
        @{
            const string style = "bg-text2 text-text1 rounded-md p-5";
        }
        @if (AppState.Violets.Count == 0)
        {
            <p class="@style">Каталог пуст...</p>
        }


        @{
            List<Violet> filteredViolets;
            if (SortByName)
            {
                filteredViolets = AppState.FilteredViolets.OrderBy(violet => violet.Name).ToList();
            }
            else if (SortByPrimaryColor)
            {
                filteredViolets = AppState.FilteredViolets.OrderBy(violet => violet.Colors.First()).ToList();
            }
            else
            {
                filteredViolets = AppState.FilteredViolets;
            }
        }
        @if (AppState.Violets.Count > 0 && filteredViolets.Count == 0)
        {
            <p class="@style">Не обнаружено ни одной фиалки удовлетворяющей текущим настройкам фильтра...</p>
        }

        @foreach (var violet in filteredViolets)
        {
            <CatalogCard Violet="violet" 
                         AddToFavourites="()=>AppState.AddToFavouritesCallback(violet)" 
                         RemoveFromFavourites="()=>AppState.RemoveFromFavouritesCallback(violet)"
                         IsInFavourites="AppState.FavouriteViolets.Contains(violet)"/>
        }
    </CatalogContainer>

</MainContainer>


@code
{
    [Parameter] public string Filter { get; set; }
    [Parameter] public string Criteria { get; set; }
    [CascadingParameter] public CascadingAppState AppState { get; set; }
    private bool SortByName { get; set; }
    private bool SortByPrimaryColor { get; set; }

    protected override void OnInitialized()
    {
        if (String.IsNullOrEmpty(Filter) || String.IsNullOrEmpty(Criteria))
        {
            return;
        }
        
        switch (Filter)
        {
            case "ByTag":
            {
                Tag tag = AppState.Filter.Tags.FirstOrDefault(tag => tag.Name.Equals(Criteria, StringComparison.OrdinalIgnoreCase));
                if (tag == null) return;
                AppState.ResetAllFilters();
                AppState.ChangeTagActivationState(tag);
                return;
            }
            case "ByColor":
            {
                Tag tag = AppState.Filter.ColorTags.FirstOrDefault(tag => tag.Name.Equals(Criteria, StringComparison.OrdinalIgnoreCase));
                if (tag == null) return;
                AppState.ResetAllFilters();
                AppState.ChangeTagActivationState(tag);
                return;
            }
            case "ByBreeder":
            {
                Tag tag = AppState.Filter.BreederTags.FirstOrDefault(tag => tag.Name.Equals(Criteria, StringComparison.OrdinalIgnoreCase));
                if (tag == null) return;
                AppState.ResetAllFilters();
                AppState.ChangeTagActivationState(tag);
                return;
            }
            case "BySize":
            {
                Tag tag = AppState.Filter.SizeTags.FirstOrDefault(tag => tag.Name.Equals(Criteria, StringComparison.OrdinalIgnoreCase));
                if (tag == null) return;
                AppState.ResetAllFilters();
                AppState.ChangeTagActivationState(tag);
                return;
            }
        }
    }

    private void SortByNameCallback()
    {
        SortByName = !SortByName;
        StateHasChanged();
    }
    
    private void SortByPrimaryColorCallback()
    {
        SortByPrimaryColor = !SortByPrimaryColor;
        StateHasChanged();
    }
}
@using ComponentsLibrary.Services
@inject ClipboardService ClipboardService

<article
    class="w-[330px] flex flex-col items-center text-text1 relative sm:w-[500px] md:w-[700px]">
    @{
        var base64Image300Src = $"data:image/jpeg;base64,{Violet.Images.FirstOrDefault(image => image.Active)!.W300}";
        var base64Image500Src = $"data:image/jpeg;base64,{Violet.Images.FirstOrDefault(image => image.Active)!.W500}";
        var base64Image700Src = $"data:image/jpeg;base64,{Violet.Images.FirstOrDefault(image => image.Active)!.W700}";
    }
    <picture>
        <source
            media="(min-width: 768px)"
            srcset="@base64Image700Src"/>
        <source
            media="(min-width: 640px)"
            srcset="@base64Image500Src"/>
        <img
            class="w-[330px] h-[330px] object-cover rounded-t-xl sm:w-[500px] sm:h-[500px] md:w-[700px] md:h-[700px]"
            src="@base64Image300Src"
            alt="Фотография фиалки @Violet.Name"/>
    </picture>
    <div class="flex gap-4 absolute top-[275px] sm:top-[475px] md:top-[675px]">
        @for (int i = 0; i < Violet.Images.Count; i++)
        {
            string style = "bg-menu w-3 h-3 rounded-full cursor-pointer hover:bg-label";
            Image image = Violet.Images[i];
            if (image.Active)
            {
                style = $"{style} border-[3px] border-label";
            }

            <button title="@($"Изображение №{i + 1}")" class="@style" @onclick="() => SetActive(image)"></button>
        }
    </div>
    <div
        class="w-[330px] flex flex-col gap-2 bg-heading text-text1 px-3 py-5 text-sm sm:w-[500px] sm:gap-3 sm:px-4 md:w-[700px] md:gap-4 md:text-xl md:px-6">
        <h2
            class="font-bold text-lg font-roboto text-center sm:text-2xl sm:text-left md:text-left md:text-4xl cursor-pointer" @onclick="CopyToClipboard">
            @Violet.Name
        </h2>
        <div class="flex gap-3 items-center">
            <svg
                class="shrink-0"
                width="20"
                height="21"
                viewBox="0 0 20 21"
                fill="none"
                xmlns="http://www.w3.org/2000/svg">
                <path
                    d="M6.25 9.25C5.75555 9.25 5.2722 9.10338 4.86108 8.82868C4.44995 8.55397 4.12952 8.16353 3.9403 7.70671C3.75108 7.2499 3.70157 6.74723 3.79804 6.26228C3.8945 5.77732 4.1326 5.33187 4.48223 4.98223C4.83187 4.6326 5.27732 4.3945 5.76228 4.29804C6.24723 4.20157 6.7499 4.25108 7.20671 4.4403C7.66353 4.62952 8.05397 4.94995 8.32868 5.36108C8.60338 5.7722 8.75 6.25555 8.75 6.75C8.74917 7.41279 8.48552 8.04819 8.01685 8.51685C7.54819 8.98552 6.91279 9.24917 6.25 9.25ZM6.25 5.5C6.00283 5.49975 5.76113 5.57279 5.55546 5.70988C5.34979 5.84698 5.18938 6.04196 5.0945 6.2702C4.99963 6.49844 4.97455 6.74969 5.02244 6.99218C5.07033 7.23467 5.18903 7.45752 5.36355 7.63256C5.53806 7.8076 5.76055 7.92697 6.0029 7.97558C6.24524 8.0242 6.49656 7.99987 6.72509 7.90569C6.95361 7.8115 7.14908 7.65167 7.28679 7.44641C7.42449 7.24115 7.49826 6.99967 7.49875 6.7525C7.49908 6.42087 7.36775 6.10266 7.13359 5.86781C6.89944 5.63296 6.58164 5.50066 6.25 5.5Z"
                    fill="#44403C"/>
                <path
                    d="M10.4025 18.8844L1.61625 10.0962C1.38197 9.86204 1.25024 9.5444 1.25 9.21312V3C1.25 2.66848 1.3817 2.35054 1.61612 2.11612C1.85054 1.8817 2.16848 1.75 2.5 1.75H8.71313C9.04462 1.75007 9.36251 1.88181 9.59688 2.11625L18.3844 10.9025C18.6187 11.1369 18.7504 11.4548 18.7504 11.7862C18.7504 12.1177 18.6187 12.4356 18.3844 12.67L12.17 18.8844C12.0539 19.0005 11.9161 19.0926 11.7644 19.1555C11.6127 19.2183 11.4501 19.2507 11.2859 19.2507C11.1217 19.2507 10.9592 19.2183 10.8075 19.1555C10.6558 19.0926 10.518 19.0005 10.4019 18.8844H10.4025ZM2.5 3V9.21375L11.2863 18L17.5 11.7862L8.71375 3H2.5Z"
                    fill="#44403C"/>
            </svg>
            <p>
                @{
                    StringBuilder tagBuilder = new();
                    foreach (string tag in Violet.Tags)
                    {
                        tagBuilder.Append($"<a href=\"/{FilterType.ByTag}/{tag}\" class=\"hover:underline\">{tag}</a>, ");
                    }

                    string tags = tagBuilder.ToString().TrimEnd().TrimEnd(',');
                }

                @((MarkupString)tags)
            </p>
        </div>
        <div class="flex gap-3 items-center">
            <svg width="20" height="21" viewBox="0 0 20 21" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M10 12.5833C11.3261 12.5833 12.5979 12.0565 13.5355 11.1188C14.4732 10.1812 15 8.9094 15 7.58331C15 6.25723 14.4732 4.98546 13.5355 4.04778C12.5979 3.1101 11.3261 2.58331 10 2.58331C8.67392 2.58331 7.40215 3.1101 6.46447 4.04778C5.52678 4.98546 5 6.25723 5 7.58331C5 8.9094 5.52678 10.1812 6.46447 11.1188C7.40215 12.0565 8.67392 12.5833 10 12.5833V12.5833Z" stroke="#44403C" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M13.3335 18.4166C13.9901 18.4166 14.6403 18.2873 15.2469 18.036C15.8535 17.7848 16.4047 17.4165 16.869 16.9522C17.3333 16.4879 17.7016 15.9367 17.9529 15.33C18.2042 14.7234 18.3335 14.0732 18.3335 13.4166C18.3335 12.76 18.2042 12.1098 17.9529 11.5032C17.7016 10.8966 17.3333 10.3454 16.869 9.88109C16.4047 9.4168 15.8535 9.0485 15.2469 8.79723C14.6403 8.54596 13.9901 8.41663 13.3335 8.41663C12.0074 8.41663 10.7356 8.94341 9.79796 9.88109C8.86028 10.8188 8.3335 12.0905 8.3335 13.4166C8.3335 14.7427 8.86028 16.0145 9.79796 16.9522C10.7356 17.8898 12.0074 18.4166 13.3335 18.4166V18.4166Z" stroke="#44403C" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M6.66675 18.4166C7.32336 18.4166 7.97354 18.2873 8.58017 18.036C9.18679 17.7848 9.73799 17.4165 10.2023 16.9522C10.6666 16.4879 11.0349 15.9367 11.2861 15.33C11.5374 14.7234 11.6667 14.0732 11.6667 13.4166C11.6667 12.76 11.5374 12.1098 11.2861 11.5032C11.0349 10.8966 10.6666 10.3454 10.2023 9.88109C9.73799 9.4168 9.18679 9.0485 8.58017 8.79723C7.97354 8.54596 7.32336 8.41663 6.66675 8.41663C5.34067 8.41663 4.0689 8.94341 3.13121 9.88109C2.19353 10.8188 1.66675 12.0905 1.66675 13.4166C1.66675 14.7427 2.19353 16.0145 3.13121 16.9522C4.0689 17.8898 5.34067 18.4166 6.66675 18.4166V18.4166Z" stroke="#44403C" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/>
            </svg>
            <p>
                @{
                    StringBuilder colorsBuilder = new();
                    foreach (VioletColor color in Violet.Colors)
                    {
                        colorsBuilder.Append($"<a href=\"/{FilterType.ByColor}/{ExtensionMethods.GetEnumDescription(color)}\" class=\"hover:underline\">{ExtensionMethods.GetEnumDescription(color).ToLower()}</a>, ");
                    }

                    string colors = colorsBuilder.ToString().TrimEnd().TrimEnd(',');
                }

                @((MarkupString)colors)
            </p>
        </div>
        <div class="flex gap-3 items-center">
            <svg
                class="shrink-0"
                width="20"
                height="21"
                viewBox="0 0 20 21"
                fill="none"
                xmlns="http://www.w3.org/2000/svg">
                <path
                    d="M10 5.5C9.38194 5.5 8.77775 5.68328 8.26384 6.02666C7.74994 6.37004 7.3494 6.8581 7.11288 7.42911C6.87635 8.00013 6.81447 8.62847 6.93505 9.23466C7.05563 9.84085 7.35325 10.3977 7.79029 10.8347C8.22733 11.2717 8.78415 11.5694 9.39034 11.69C9.99654 11.8105 10.6249 11.7486 11.1959 11.5121C11.7669 11.2756 12.255 10.8751 12.5983 10.3612C12.9417 9.84725 13.125 9.24307 13.125 8.625C13.125 7.7962 12.7958 7.00134 12.2097 6.41529C11.6237 5.82924 10.8288 5.5 10 5.5ZM10 10.5C9.62916 10.5 9.26665 10.39 8.95831 10.184C8.64997 9.97798 8.40964 9.68514 8.26773 9.34253C8.12581 8.99992 8.08868 8.62292 8.16103 8.25921C8.23338 7.89549 8.41195 7.5614 8.67418 7.29917C8.9364 7.03695 9.27049 6.85837 9.63421 6.78603C9.99792 6.71368 10.3749 6.75081 10.7175 6.89273C11.0601 7.03464 11.353 7.27496 11.559 7.58331C11.765 7.89165 11.875 8.25416 11.875 8.625C11.8745 9.12213 11.6768 9.59875 11.3253 9.95028C10.9738 10.3018 10.4971 10.4995 10 10.5Z"
                    fill="#44403C"/>
                <path
                    d="M10 1.75C8.26942 1.75 6.57769 2.26318 5.13876 3.22464C3.69983 4.1861 2.57832 5.55267 1.91606 7.15152C1.25379 8.75037 1.08051 10.5097 1.41813 12.207C1.75575 13.9044 2.58911 15.4635 3.81282 16.6872C5.03653 17.9109 6.59563 18.7442 8.29296 19.0819C9.9903 19.4195 11.7496 19.2462 13.3485 18.5839C14.9473 17.9217 16.3139 16.8002 17.2754 15.3612C18.2368 13.9223 18.75 12.2306 18.75 10.5C18.7474 8.18017 17.8246 5.95611 16.1843 4.31574C14.5439 2.67537 12.3198 1.75265 10 1.75ZM6.25 16.9856V16.125C6.2505 15.6279 6.4482 15.1512 6.79973 14.7997C7.15125 14.4482 7.62788 14.2505 8.125 14.25H11.875C12.3721 14.2505 12.8488 14.4482 13.2003 14.7997C13.5518 15.1512 13.7495 15.6279 13.75 16.125V16.9856C12.612 17.6501 11.3178 18.0003 10 18.0003C8.68218 18.0003 7.38802 17.6501 6.25 16.9856ZM14.995 16.0788C14.9825 15.259 14.6485 14.4769 14.0649 13.901C13.4814 13.3251 12.6949 13.0015 11.875 13H8.125C7.30512 13.0015 6.51865 13.3251 5.93506 13.901C5.35147 14.4769 5.01746 15.259 5.005 16.0788C3.87161 15.0667 3.07234 13.7343 2.71303 12.2579C2.35372 10.7815 2.45132 9.23084 2.9929 7.81116C3.53449 6.39148 4.49452 5.16979 5.74586 4.30785C6.99721 3.44592 8.48084 2.98439 10.0003 2.98439C11.5198 2.98439 13.0034 3.44592 14.2548 4.30785C15.5061 5.16979 16.4661 6.39148 17.0077 7.81116C17.5493 9.23084 17.6469 10.7815 17.2876 12.2579C16.9283 13.7343 16.129 15.0667 14.9956 16.0788H14.995Z"
                    fill="#44403C"/>
            </svg>
            <a href="@($"/{FilterType.ByBreeder}/{Violet.Breeder}")" class="hover:underline">@Violet.Breeder</a>
        </div>
        <div class="flex gap-3 items-center">
            <svg width="20" height="21" viewBox="0 0 20 21" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M16.25 3H13.75V1.75H12.5V3H7.5V1.75H6.25V3H3.75C3.0625 3 2.5 3.5625 2.5 4.25V16.75C2.5 17.4375 3.0625 18 3.75 18H16.25C16.9375 18 17.5 17.4375 17.5 16.75V4.25C17.5 3.5625 16.9375 3 16.25 3ZM16.25 16.75H3.75V8H16.25V16.75ZM16.25 6.75H3.75V4.25H6.25V5.5H7.5V4.25H12.5V5.5H13.75V4.25H16.25V6.75Z" fill="#44403C"/>
            </svg>
            <p>@Violet.BreedingDate.Date.ToString("yyyy")</p>
        </div>
    </div>
    <div class="w-[330px] bg-text2 px-3 py-5 text-sm rounded-b-xl sm:w-[500px] sm:px-4 md:w-[700px] md:px-6 md:text-base">
        @((MarkupString)Violet.Description)
    </div>
</article>

@code
{
    [Parameter]
    public Violet Violet { get; set; }

    private void SetActive(Image image)
    {
        Violet.Images.ForEach(i => i.Active = false);
        image.Active = true;
    }

    async Task CopyToClipboard()
    {
    // Writing to the clipboard may be denied, so you must handle the exception
        try
        {
            await ClipboardService.WriteTextAsync(Violet.Id.ToString());
        }
        catch
        {
            Console.WriteLine("Cannot write text to clipboard");
        }
    }
}
@using Humanizer

<div class="flex justify-between flex-col border border-heading rounded-t w-full">
    <div class="flex items-center justify-between pr-1 md:pr-2 bg-heading">
        
        <div class="flex items-center gap-2 md:gap-4 lg:gap-6">
            <a class="shrink-0" href="@($"/details/{Violet.TransliteratedName}")" title="@Violet.Name">
                <img
                    class="w-[50px] h-[50px] object-cover rounded-tl md:w-[60px] md:h-[60px] lg:w-[70px] lg:h-[70px]"
                    src="@($"data:image/jpeg;base64,{Violet.Images[0].W300}")"
                    alt="Фотография фиалки @Violet.Name"/>
            </a>
            <a class="font-bold hover:underline decoration-2 underline-offset-2 sm:text-xl lg:text-2xl" href="@($"/details/{Violet.TransliteratedName}")" title="@Violet.Name">
                @(Violet.Name.Truncate(20, Truncator.FixedLength))
            </a>    
        </div>
        
        <button title="Удалить из корзины" @onclick="RemoveFromCart">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24">
                <path fill="#44403C" fill-rule="evenodd" d="M10.31 2.25h3.38c.217 0 .406 0 .584.028a2.25 2.25 0 0 1 1.64 1.183c.084.16.143.339.212.544l.111.335a1.25 1.25 0 0 0 1.263.91h3a.75.75 0 0 1 0 1.5h-17a.75.75 0 0 1 0-1.5h3.09a1.25 1.25 0 0 0 1.173-.91l.112-.335c.068-.205.127-.384.21-.544a2.25 2.25 0 0 1 1.641-1.183c.178-.028.367-.028.583-.028m-1.302 3a2.757 2.757 0 0 0 .175-.428l.1-.3c.091-.273.112-.328.133-.368a.75.75 0 0 1 .547-.395a3.2 3.2 0 0 1 .392-.009h3.29c.288 0 .348.002.392.01a.75.75 0 0 1 .547.394c.021.04.042.095.133.369l.1.3l.039.112c.039.11.085.214.136.315z" clip-rule="evenodd"/>
                <path fill="#44403C" d="M5.915 8.45a.75.75 0 1 0-1.497.1l.464 6.952c.085 1.282.154 2.318.316 3.132c.169.845.455 1.551 1.047 2.104c.591.554 1.315.793 2.17.904c.822.108 1.86.108 3.146.108h.879c1.285 0 2.324 0 3.146-.108c.854-.111 1.578-.35 2.17-.904c.591-.553.877-1.26 1.046-2.104c.162-.813.23-1.85.316-3.132l.464-6.952a.75.75 0 0 0-1.497-.1l-.46 6.9c-.09 1.347-.154 2.285-.294 2.99c-.137.685-.327 1.047-.6 1.303c-.274.256-.648.422-1.34.512c-.713.093-1.653.095-3.004.095h-.774c-1.35 0-2.29-.002-3.004-.095c-.692-.09-1.066-.256-1.34-.512c-.273-.256-.463-.618-.6-1.302c-.14-.706-.204-1.644-.294-2.992z"/>
                <path fill="#44403C" d="M9.425 10.254a.75.75 0 0 1 .821.671l.5 5a.75.75 0 0 1-1.492.15l-.5-5a.75.75 0 0 1 .671-.821m5.15 0a.75.75 0 0 1 .671.82l-.5 5a.75.75 0 0 1-1.492-.149l.5-5a.75.75 0 0 1 .82-.671"/>
            </svg>
        </button>
        
    </div>
    <div class="grid grid-cols-1">
        @if (Violet.IsLeafsInfoValid())
        {
            <CartVioletPart 
                PurchaseOption="VioletPurchaseOption.Leaf" 
                Amount="Violet.SelectedLeafs" 
                PartPrice="Violet.CalculatedLeafsPrice"
                DecreaseQuantity="() => AppState.DecreaseNumberOfSelectedLeafs(Violet)"
                IncreaseQuantity="() => AppState.IncreaseNumberOfSelectedLeafs(Violet) "/>
        }
        
        @if (Violet.IsChildrenInfoValid())
        {
            <CartVioletPart 
                PurchaseOption="VioletPurchaseOption.Offshoot" 
                Amount="Violet.SelectedChildren"
                PartPrice="Violet.CalculatedChildrenPrice"
                DecreaseQuantity="() => AppState.DecreaseNumberOfSelectedChildren(Violet)"
                IncreaseQuantity="() => AppState.IncreaseNumberOfSelectedChildren(Violet)" />
        }
        
        @if (Violet.IsWholePlantInfoValid())
        {
            <CartVioletPart 
                PurchaseOption="VioletPurchaseOption.WholePlant" 
                Amount="Violet.SelectedWholePlants" 
                PartPrice="Violet.CalculatedWholePlantsPrice"
                DecreaseQuantity="() => AppState.DecreaseNumberOfSelectedWholePlants(Violet)"
                IncreaseQuantity="() => AppState.IncreaseNumberOfSelectedWholePlants(Violet)" />
        }
    </div>
</div>

@code
{
    [CascadingParameter] public CascadingAppState AppState { get; set; }

    [Parameter] public StoredViolet Violet { get; set; }

    [Parameter] public EventCallback RemoveFromShoppingCart { get; set; }

    private async Task RemoveFromCart()
    {
        if (RemoveFromShoppingCart.HasDelegate)
        {
            await RemoveFromShoppingCart.InvokeAsync(this);
        }
    }
}

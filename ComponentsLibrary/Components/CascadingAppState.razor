@using Blazored.LocalStorage
@using SharedLibrary.Providers
@inject IVioletRepository VioletRepository
@inject ILocalStorageService LocalStorage

<CascadingValue Value="this">
   @ChildContent 
</CascadingValue>

@code {
    private const string FavouritesLocalStorageKey = "FavouriteViolets";
    [Parameter] public RenderFragment ChildContent { get; set; }
    protected override void OnInitialized()
    {
        Violets = VioletRepository.GetAllViolets().ToList();
        InitFilter();

        FiltersPanel = new FiltersPanelVisibility();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var itemsString = await LocalStorage.GetItemAsync<string>(FavouritesLocalStorageKey);
            if (string.IsNullOrEmpty(itemsString))
            {
                return;
            }
        
            var guidArray = JsonConvert.DeserializeObject<string[]>(itemsString);
        
            foreach (var guidStr in guidArray)
            {
                var isSuccess = Guid.TryParse(guidStr, out var guid);
                if (!isSuccess)
                {
                    continue;
                }

                var foundViolet = Violets.FirstOrDefault(violet => violet.Id.Equals(guid));
                if (foundViolet == null) continue;
                FavouriteViolets.Add(foundViolet);
                StateHasChanged();
            }   
        }
    }

    private List<Violet> _violets;
    public List<Violet> Violets
    {
        get => _violets;
        private set
        {
            _violets = value;
            StateHasChanged();
        }
    }

    public FiltersPanelVisibility FiltersPanel { get; private set; }

    public List<Violet> FilteredViolets
    {
        get
        {
            return Violets
                .Where(violet =>
                {
                    List<string> activeFilterTags = Filter.Tags
                        .Where(tag => tag.Active)
                        .Select(tag => tag.Name)
                        .ToList();

                    return activeFilterTags.Count == 0 || violet.Tags.Any(tag => activeFilterTags.Contains(tag));
                })
                .Where(violet =>
                {
                    List<string> activeBreederTags = Filter.BreederTags
                        .Where(tag => tag.Active)
                        .Select(tag => tag.Name)
                        .ToList();

                    return activeBreederTags.Count == 0 || activeBreederTags.Contains(violet.Breeder);
                })
                .Where(violet =>
                {
                    List<string> activeChimeraTags = Filter.ChimeraTags
                        .Where(tag => tag.Active)
                        .Select(tag => tag.Name)
                        .ToList();

                    return activeChimeraTags.Count == 0 || activeChimeraTags.Contains(violet.IsChimera ? "да" : "нет");
                })
                .Where(violet =>
                {
                    List<string> activeColorTags = Filter.ColorTags
                        .Where(tag => tag.Active)
                        .Select(tag => tag.Name)
                        .ToList();

                    return activeColorTags.Count == 0 || violet.Colors.Any(color => activeColorTags.Contains(ExtensionMethods.GetEnumDescription(color)));
                })
                .Where(violet =>
                {
                    List<string> activeSizeTags = Filter.SizeTags
                        .Where(tag => tag.Active)
                        .Select(tag => tag.Name)
                        .ToList();

                    return activeSizeTags.Count == 0 || activeSizeTags.Contains(ExtensionMethods.GetEnumDescription(violet.Size));
                })
                .Where(violet =>
                {
                    List<string> activeYearTags = Filter.YearTags
                        .Where(tag => tag.Active)
                        .Select(tag => tag.Name)
                        .ToList();

                    return activeYearTags.Count == 0 || activeYearTags.Contains(violet.BreedingDate.Year.ToString());
                })
                .ToList();
        }
    }

    public List<Violet> FavouriteViolets { get; } = [];

    public async Task AddToFavouritesCallback(Violet violet)
    {
        if (FavouriteViolets.Contains(violet))
        {
            return;
        }

        FavouriteViolets.Add(violet);

        await LocalStorage.SetItemAsync(FavouritesLocalStorageKey, FavouriteViolets.Select(v => v.Id).ToArray());
    }

    public async Task RemoveFromFavouritesCallback(Violet violet)
    {
        if (!FavouriteViolets.Contains(violet))
        {
            return;
        }

        FavouriteViolets.Remove(violet);
        
        await LocalStorage.SetItemAsync(FavouritesLocalStorageKey, FavouriteViolets.Select(v => v.Id).ToArray());
    }
    
    public Filter Filter { get; private set; }
    private void InitFilter()
    {
        var tagsList = Violets
            .SelectMany(violet => violet.Tags)
            .Distinct()
            .OrderBy(tag => tag)
            .Select(tag => new Tag(tag))
            .ToList();

        var colorsTags = Violets
            .SelectMany(violet => violet.Colors)
            .Distinct()
            .Select(color => new Tag(ExtensionMethods.GetEnumDescription(color)))
            .OrderBy(tag => tag.Name)
            .ToList();

        var sizeTags = Violets
            .Select(violet => violet.Size)
            .Distinct()
            .Select(size => new Tag(ExtensionMethods.GetEnumDescription(size)))
            .OrderBy(tag => tag.Name)
            .ToList();

        var breedersTags = Violets
            .Select(violet => violet.Breeder)
            .Distinct()
            .OrderBy(name => name)
            .Select(breeder => new Tag(breeder))
            .ToList();

        var yearsTags = Violets
            .Select(violet => violet.BreedingDate)
            .Distinct()
            .OrderBy(time => time)
            .Select(dateTime => new Tag(dateTime.Year.ToString()))
            .ToList();

        var chimeraTags = Violets
            .Select(violet => violet.IsChimera)
            .Distinct()
            .Select(b => new Tag(b ? "да" : "нет"))
            .OrderBy(tag => tag.Name)
            .ToList();

        Filter = new Filter(tagsList, colorsTags, breedersTags, yearsTags, chimeraTags, sizeTags);
    }

    public void ChangeTagActivationState(Tag tag)
    {
        tag.Active = !tag.Active;
        StateHasChanged();
    }

    public void ChangeTagsVisibility()
    {
        FiltersPanel.TagsVisible = !FiltersPanel.TagsVisible;
    }

    public void ChangeColorsVisibility()
    {
        FiltersPanel.ColorsVisible = !FiltersPanel.ColorsVisible;
    }

    public void ChangeSizesVisibility()
    {
        FiltersPanel.SizesVisible = !FiltersPanel.SizesVisible;
    }

    public void ChangeBreedersVisibility()
    {
        FiltersPanel.BreederVisible = !FiltersPanel.BreederVisible;
    }

    public void ChangeYearsVisibility()
    {
        FiltersPanel.YearsVisible = !FiltersPanel.YearsVisible;
    }

    public void ChangeChimeraVisibility()
    {
        FiltersPanel.ChimeraVisible = !FiltersPanel.ChimeraVisible;
    }

    public void ResetAllFilters()
    {
        Filter.Tags.ForEach(tag => tag.Active = false);
        Filter.BreederTags.ForEach(tag => tag.Active = false);
        Filter.SizeTags.ForEach(tag => tag.Active = false);
        Filter.ChimeraTags.ForEach(tag => tag.Active = false);
        Filter.ColorTags.ForEach(tag => tag.Active = false);
        Filter.YearTags.ForEach(tag => tag.Active = false);
        StateHasChanged();
    }

    public bool HasAnyActiveFilter() => 
        Filter.Tags
            .Concat(Filter.BreederTags)
            .Concat(Filter.SizeTags)
            .Concat(Filter.ChimeraTags)
            .Concat(Filter.ColorTags)
            .Concat(Filter.YearTags)
            .ToList()
            .Any(tag => tag.Active);
}
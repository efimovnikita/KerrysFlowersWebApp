<CascadingValue Value="this">
   @ChildContent 
</CascadingValue>

@code {
    [Parameter] public RenderFragment ChildContent { get; set; }
    protected override void OnInitialized()
    {
        string[] directories = Directory.GetDirectories(Path.Combine(Directory.GetCurrentDirectory(), "wwwroot"));
        string violetsDirPath = directories.FirstOrDefault(s => s.Contains("Violets"));
        string[] jsonFiles = Directory.GetFiles(violetsDirPath!, "*.json", SearchOption.AllDirectories);

        Violets = jsonFiles
            .Select(File.ReadAllText)
            .Select(JsonConvert.DeserializeObject<Violet>)
            .ToList();
        InitFilter();

        FiltersPanel = new FiltersPanelVisibility();
    }

    private List<Violet> _violets;
    public List<Violet> Violets
    {
        get => _violets;
        private set
        {
            _violets = value;
            StateHasChanged();
        }
    }

    public FiltersPanelVisibility FiltersPanel { get; private set; }

    public List<Violet> FilteredViolets
    {
        get
        {
            return Violets
                .Where(violet =>
                {
                    List<string> activeFilterTags = Filter.Tags
                        .Where(tag => tag.Active)
                        .Select(tag => tag.Name)
                        .ToList();

                    return activeFilterTags.Count == 0 || violet.Tags.Any(tag => activeFilterTags.Contains(tag));
                })
                .Where(violet =>
                {
                    List<string> activeBreederTags = Filter.BreederTags
                        .Where(tag => tag.Active)
                        .Select(tag => tag.Name)
                        .ToList();

                    return activeBreederTags.Count == 0 || activeBreederTags.Contains(violet.Breeder);
                })
                .Where(violet =>
                {
                    List<string> activeChimeraTags = Filter.ChimeraTags
                        .Where(tag => tag.Active)
                        .Select(tag => tag.Name)
                        .ToList();

                    return activeChimeraTags.Count == 0 || activeChimeraTags.Contains(violet.IsChimera ? "да" : "нет");
                })
                .Where(violet =>
                {
                    List<string> activeColorTags = Filter.ColorTags
                        .Where(tag => tag.Active)
                        .Select(tag => tag.Name)
                        .ToList();

                    return activeColorTags.Count == 0 || violet.Colors.Any(color => activeColorTags.Contains(ExtensionMethods.GetEnumDescription(color)));
                })
                .Where(violet =>
                {
                    List<string> activeYearTags = Filter.YearTags
                        .Where(tag => tag.Active)
                        .Select(tag => tag.Name)
                        .ToList();

                    return activeYearTags.Count == 0 || activeYearTags.Contains(violet.BreedingDate.Year.ToString());
                })
                .ToList();
        }
    }


    public Filter Filter { get; private set; }
    private void InitFilter()
    {
        List<Tag> tagsList = Violets
            .SelectMany(violet => violet.Tags)
            .Distinct()
            .Select(tag => new Tag(tag))
            .ToList();

        List<Tag> colorsTags = Violets
            .SelectMany(violet => violet.Colors)
            .Distinct()
            .Select(color => new Tag(ExtensionMethods.GetEnumDescription(color)))
            .ToList();

        List<Tag> breedersTags = Violets
            .Select(violet => violet.Breeder)
            .Distinct()
            .Select(breeder => new Tag(breeder))
            .ToList();

        List<Tag> yearsTags = Violets
            .Select(violet => violet.BreedingDate)
            .Distinct()
            .Select(dateTime => new Tag(dateTime.Year.ToString()))
            .ToList();

        List<Tag> chimeraTags = Violets
            .Select(violet => violet.IsChimera)
            .Distinct()
            .Select(b => new Tag(b ? "да" : "нет"))
            .ToList();

        Filter = new Filter(tagsList, colorsTags, breedersTags, yearsTags, chimeraTags);
    }

    public void ChangeTagActivationState(Tag tag)
    {
        tag.Active = !tag.Active;
        StateHasChanged();
    }

    public void ChangeTagsVisibility()
    {
        FiltersPanel.TagsVisible = !FiltersPanel.TagsVisible;
    }

    public void ChangeColorsVisibility()
    {
        FiltersPanel.ColorsVisible = !FiltersPanel.ColorsVisible;
    }

    public void ChangeBreedersVisibility()
    {
        FiltersPanel.BreederVisible = !FiltersPanel.BreederVisible;
    }

    public void ChangeYearsVisibility()
    {
        FiltersPanel.YearsVisible = !FiltersPanel.YearsVisible;
    }

    public void ChangeChimeraVisibility()
    {
        FiltersPanel.ChimeraVisible = !FiltersPanel.ChimeraVisible;
    }
}
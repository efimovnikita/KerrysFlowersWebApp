@{
    List<string> mainContainerStyle = new() {"bg-menu", "flex", "flex-col", 
        "items-start", "p-2.5", "gap-[10px]", "border-t-[1px]", "border-t-background"};
    if (IsTail)
    {
        mainContainerStyle.Add("rounded-b-[22px]");
    }
    if (IsHidden)
    {
        mainContainerStyle.Add("hidden");
    }
}
<div class="@(String.Join(' ', mainContainerStyle))">
    <button @onclick="ChangeVisibility" title="@(Title)" 
            class="hover:underline hover:decoration-menutext/30 hover:underline-offset-4">@(Visible ? $"{Title}:" : Title)</button>
    @{
        List<string> tagsContainerStyle = new() {"flex", "flex-wrap", "gap-[5px]", "text-[15px]", "leading-none"};
        if (Visible == false)
        {
            tagsContainerStyle.Add("hidden");
        }
    }
    <ul class="@(String.Join(' ', tagsContainerStyle))">
        @foreach (Tag tag in Tags)
        {
            <TagButton Tag="tag" ChangeTagState="ChangeTagState" />
        }
    </ul>
</div>

@code {
    [Parameter, EditorRequired] public string Title { get; set; }
    [Parameter, EditorRequired] public bool IsHidden { get; set; }
    [Parameter, EditorRequired] public bool IsTail { get; set; }
    [Parameter, EditorRequired] public List<Tag> Tags { get; set; }
    [Parameter, EditorRequired] public EventCallback<Tag> ChangeTagState { get; set; }
    [Parameter, EditorRequired] public EventCallback ChangeVisibility { get; set; }
    [Parameter, EditorRequired] public bool Visible { get; set; }
    [CascadingParameter] public CascadingAppState AppState { get; set; }
}
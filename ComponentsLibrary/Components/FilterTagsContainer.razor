@{
    List<string> mainContainerStyle = new() {"bg-menu", "flex", "flex-col", 
        "items-start", "p-2.5", "gap-[10px]", "border-t-[1px]", "border-t-background"};
    if (IsTail)
    {
        mainContainerStyle.Add("rounded-b-[22px]");
    }
    if (IsHidden)
    {
        mainContainerStyle.Add("hidden");
    }
}
<div class="@(String.Join(' ', mainContainerStyle))">
    <button @onclick="ChangeVisibility" title="@(Title)" class="w-full flex justify-between items-center hover:underline hover:decoration-menutext/30 hover:underline-offset-4">
        <span>@Title</span>
        @{
            string svgStyle = Visible == false ? "rotate-180" : "";
        }
        <svg class="@svgStyle" width="25" height="24" viewBox="0 0 25 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M5.00301 16.011L12.5 8.70297L19.997 16.011C20.131 16.1418 20.3108 16.2151 20.498 16.2151C20.6852 16.2151 20.8651 16.1418 20.999 16.011C21.0639 15.9474 21.1154 15.8716 21.1506 15.7879C21.1857 15.7042 21.2039 15.6143 21.2039 15.5235C21.2039 15.4327 21.1857 15.3428 21.1506 15.2591C21.1154 15.1754 21.0639 15.0995 20.999 15.036L13.0235 7.25997C12.8834 7.12345 12.6956 7.04704 12.5 7.04704C12.3044 7.04704 12.1166 7.12345 11.9765 7.25997L4.00101 15.0345C3.93569 15.0981 3.88378 15.1741 3.84833 15.2581C3.81289 15.3421 3.79462 15.4323 3.79462 15.5235C3.79462 15.6146 3.81289 15.7049 3.84833 15.7889C3.88378 15.8728 3.93569 15.9489 4.00101 16.0125C4.13495 16.1433 4.31477 16.2166 4.50201 16.2166C4.68925 16.2166 4.86906 16.1433 5.00301 16.0125V16.011Z" fill="#FDD9C2"/>
        </svg>
    </button>
    @{
        List<string> tagsContainerStyle = new() {"flex", "flex-wrap", "gap-[5px]", "text-[15px]", "leading-none"};
        if (Visible == false)
        {
            tagsContainerStyle.Add("hidden");
        }
    }
    <ul class="@(String.Join(' ', tagsContainerStyle))">
        @foreach (Tag tag in Tags)
        {
            <TagButton Tag="tag" ChangeTagState="ChangeTagState" />
        }
    </ul>
</div>

@code {
    [Parameter, EditorRequired] public string Title { get; set; }
    [Parameter, EditorRequired] public bool IsHidden { get; set; }
    [Parameter, EditorRequired] public bool IsTail { get; set; }
    [Parameter, EditorRequired] public List<Tag> Tags { get; set; }
    [Parameter, EditorRequired] public EventCallback<Tag> ChangeTagState { get; set; }
    [Parameter, EditorRequired] public EventCallback ChangeVisibility { get; set; }
    [Parameter, EditorRequired] public bool Visible { get; set; }
    [CascadingParameter] public CascadingAppState AppState { get; set; }
}